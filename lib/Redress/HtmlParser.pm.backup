package Redress::HtmlParser;

use strict;
use warnings;

use HTML::Parser;

use vars qw(@ISA);

@ISA = ("HTML::Parser");

use Carp;
use Redress::DifficultyEstimator;
use Redress::Categorizer;


# Extract citations for later analysis ???

# Supply the single argument of 1 if you want the parser to also categorize
sub new
{
	#carp "Redress::HtmlParser::new called\n";
	#
	#
	my $self = Redress::HtmlParser->SUPER::new(api_version => 3,
							start_h => [\&start, "tagname, attr"],
							text_h => [\&text, "dtext"],
	                                		end_h   => [\&end,   "tagname"]);

	my ($class,$args) = @_;

	#carp sprintf "Self: %s\n",ref($self);

	# Flag used during html parsing so that text callback can add the contents
	# of the <title> tag as the title metadata label. This label will be
	# overwritten wwith the contents of a <meta tag with the DC.title name, if
	# found.
	$self->{TITLE_FLAG} = 0;

	$self->{TEXT} = '';
	$self->{METADATA} = {};
	$self->{ESTIMATOR} = Redress::DifficultyEstimator->new();

	if(defined($args->{CATEGORIZE}) and $args->{CATEGORIZE} eq 1)
	{
		$self->{CATEGORIZER} = Redress::Categorizer->new();
	}

	return $self;
}

=item parse

 Extracts the metadata from the html content (passed by reference) and sticks
 it in a hash. The hash is then returned.

=cut

sub parse_content
{
	carp "Redress::HtmlParser::parse_content called";

	#my ($self,$content) = @_;
	my $self = shift;
	my $content = shift;

	$self->{TEXT} = '';
	$self->{METADATA} = {};

	$self->parse($$content);

	carp "Redress::HtmlParser::parse_content finished";

	return $self->{METADATA};
}

# Text handler for HTML::Parser
sub text
{
	my ($self,$text) = @_;

	chomp $text;

	if($self->{TITLE_FLAG} eq 1)
	{
		$self->{METADATA}->{'title'} = $text;
	}
	else
	{
		$self->{TEXT} .= $text;
	}
}

# Start handler for HTML::Parser
sub start
{
	my($self,$tagname,$attr) = @_;

	carp "start";

	if($tagname eq 'title')
	{
		# We set this so that the text handler can set the title metadata label
		$self->{TITLE_FLAG} = 1;
	}

	if($tagname eq 'meta')
	{
		my $name = $attr->{name};

		unless(defined($name))
		{
			print "No name attribute for <meta> tag. Returning ...\n";
			return;
		}

		if($name eq 'keywords')
		{
			my $content = $attr->{content};

			unless(defined($content))
			{
				print "No content attribute for <meta> tag. Returning ...\n";
				return;
			}

			$self->{METADATA}->{'subject'} = $content;
		}
		
		# Dublin core block to handle metadata elements with the DC.labelname
		# name format
		if($name =~ /^DC\.([a-zA-Z]+)$/i)
		{
			my $content = $attr->{content};

			unless(defined($content))
			{
				print "No content attribute for <meta> tag. Returning ...\n";
				return;
			}

			#print "name=\"$1\" content=\"$content\"/>\n";

			if($1 eq 'subject')
			{
				if(defined($self->{METADATA}->{'subject'}))
				{
					$self->{METADATA}->{'subject'} .= $content;
				}
			}
			elsif($1 eq 'creator')
			{
				unless(defined($self->{METADATA}->{'creators'}))
				{
					$self->{METADATA}->{'creators'} = [];
				}

				my $creators = $self->{METADATA}->{'creators'};
				push(@$creators,$content);
			}
			elsif($1 eq 'publisher')
			{
				unless(defined($self->{METADATA}->{'publishers'}))
				{
					$self->{METADATA}->{'publishers'} = [];
				}

				my $publishers = $self->{METADATA}->{'publishers'};
				push(@$publishers,$content);
			}
			elsif($1 eq 'bibliographicCitation')
			{
				unless(defined($self->{METADATA}->{'citations'}))
				{
					$self->{METADATA}->{'citations'} = [];
				}

				my $citations = $self->{METADATA}->{'citations'};
				push(@$citations,$content);
			}
			else
			{
				$self->{METADATA}->{"$1"} = $content;
			}
		}
	}
}

# End tag handler for HTML::Parser
sub end
{
	my ($self,$tagname) = @_;
	carp "HERE!!!";

	$self->{TITLE_FLAG} = 0 if($tagname eq 'title');

	return unless($tagname eq 'html');

	my $document_text = $self->{TEXT};


	my $redress_difficulty = $self->{ESTIMATOR}->estimate(\$document_text);

	carp "Redress Difficulty: $redress_difficulty";

	$self->{METADATA}->{'redress_difficulty'} = $redress_difficulty;

	# Sometimes we may not want to categorize. When we are parsing documents from
	# the training set for example.
	if($self->{CATEGORIZER})
	{
		my $category = $self->{CATEGORIZER}->categorize(\$document_text);
		carp "Category: $category";
		
		# Set the category label
		my @categories = ($category);

		$self->{METADATA}->{'categories'} = [$category];
		#$self->{METADATA}->{'categories'} = \@categories;
	}
}

1;
